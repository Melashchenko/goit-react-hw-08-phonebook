{"version":3,"file":"static/js/871.404ccad3.chunk.js","mappings":"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","sources":["components/ContactFormFormik/ContactFormFormik.styled.jsx","redux/contacts/selectors.js","components/ContactFormFormik/ContactFormFormik.jsx","components/ContactEl/ContactEl.styled.jsx","components/ContactEl/ContactEl.jsx","redux/filter/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const Input = styled(Field)`\n  display: block;\n  outline: none;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 16px;\n  color: white;\n  margin-bottom: 32px;\n`;\n\nexport const Btn = styled.button`\n  border: none;\n  font-size: 16px;\n  color: white;\n  background-color: #009dff;\n  border-radius: 6px;\n  border: 3px solid white;\n  padding: 4px;\n  margin-left: auto;\n  cursor: pointer;\n  &:active {\n    background-color: #0ab4da;\n  }\n`;\nexport const Container = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 8px;\n  border-radius: 4px;\n  background-color: #009dff;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: yellow;\n  font-size: 10px;\n`;\n","export const selectContacts = state => state.contactsState.contacts.items;\nexport const selectIsLoading = state => state.contactsState.contacts.isLoading;\nexport const selectError = state => state.contactsState.contacts.error;\n","import { Formik } from 'formik';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { object, string } from 'yup';\nimport {\n  Btn,\n  Container,\n  Error,\n  Input,\n  Label,\n} from './ContactFormFormik.styled';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst schema = object({\n  name: string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces.'\n    )\n    .required('Name is a required'),\n  number: string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Phone is a required'),\n});\nconst initialValues = { name: '', number: '' };\n\nexport const ContactFormFormik = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const oldContact = contacts.find(contact => contact.name === name);\n\n    if (oldContact) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Container autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <Error name=\"name\" component=\"div\" />\n        </Label>\n        <Label htmlFor=\"number\">\n          Phone\n          <Input type=\"tel\" name=\"number\" />\n          <Error name=\"number\" component=\"div\" />\n        </Label>\n\n        <Btn type=\"submit\">Add contact</Btn>\n      </Container>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Btn = styled.button`\n  background-color: #ff260090;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  &:active {\n    background-color: red;\n  }\n`;\n\nexport const ContactsEl = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { Btn, ContactsEl } from 'components/ContactEl/ContactEl.styled';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactEl = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactsEl>\n      <p>\n        {name}: <br />\n        {number}\n      </p>\n      <Btn onClick={() => dispatch(deleteContact(id))}>Delete</Btn>\n    </ContactsEl>\n  );\n};\n\nContactEl.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const selectFilter = state => state.filtersState.filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { ContactEl } from 'components/ContactEl/ContactEl';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Box } from 'components/Box';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const getFilterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filterContacts = getFilterContacts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  if (isLoading !== true && filterContacts.length === 0) {\n    return (\n      <Box as=\"p\" p={10}>\n        No contacts saved\n      </Box>\n    );\n  }\n\n  return (\n    <div>\n      {isLoading && <p>Loading ...</p>}\n      {error && <p>{error}</p>}\n      {contacts.length > 0 &&\n        filterContacts.map(contact => (\n          <ContactEl contact={contact} key={contact.id} />\n        ))}\n    </div>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      <label>\n        Find contacts by name\n        <input type=\"text\" value={filter} onChange={changeFilter} />\n      </label>\n    </>\n  );\n};\n","import { Box } from 'components/Box';\nimport { ContactFormFormik } from 'components/ContactFormFormik/ContactFormFormik';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  return (\n    <Box as=\"div\" display=\"flex\" flexDirection=\"column\" width={280}>\n      <title>Your contacts </title>\n\n      <ContactFormFormik />\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n}\n"],"names":["Input","styled","Field","Label","Btn","Container","Form","Error","ErrorMessage","selectContacts","state","contactsState","contacts","items","selectIsLoading","isLoading","selectError","error","schema","object","name","string","matches","required","number","initialValues","ContactFormFormik","useSelector","dispatch","useDispatch","onSubmit","resetForm","find","contact","alert","newContact","addContact","validationSchema","autoComplete","htmlFor","type","component","ContactsEl","ContactEl","id","onClick","deleteContact","selectFilter","filtersState","filter","ContactList","filterContacts","normalizedFilter","toLowerCase","includes","getFilterContacts","useEffect","fetchContacts","length","Box","as","p","map","Filter","value","onChange","e","setFilter","currentTarget","Contacts","display","flexDirection","width"],"sourceRoot":""}